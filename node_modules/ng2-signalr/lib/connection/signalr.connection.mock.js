"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var signalr_connection_base_1 = require("./signalr.connection.base");
var ReplaySubject_1 = require("rxjs/ReplaySubject");
var SignalRConnectionMock = (function (_super) {
    __extends(SignalRConnectionMock, _super);
    function SignalRConnectionMock() {
        var _this = _super.call(this) || this;
        _this._errors$ = new ReplaySubject_1.ReplaySubject();
        _this._status$ = new ReplaySubject_1.ReplaySubject();
        _this.listeners = {};
        return _this;
    }
    Object.defineProperty(SignalRConnectionMock.prototype, "errors", {
        get: function () {
            return this._errors$;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SignalRConnectionMock.prototype, "errors$", {
        get: function () {
            return this._errors$;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SignalRConnectionMock.prototype, "status", {
        get: function () {
            return this._status$;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SignalRConnectionMock.prototype, "status$", {
        get: function () {
            return this._status$;
        },
        enumerable: true,
        configurable: true
    });
    SignalRConnectionMock.prototype.stop = function () {
    };
    SignalRConnectionMock.prototype.start = function () {
        return Promise.resolve(null);
    };
    SignalRConnectionMock.prototype.listen = function (listener) {
        this.listeners[listener.event] = listener;
    };
    SignalRConnectionMock.prototype.invoke = function (method) {
        var parameters = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            parameters[_i - 1] = arguments[_i];
        }
        return Promise.resolve(null);
    };
    return SignalRConnectionMock;
}(signalr_connection_base_1.SignalRConnectionBase));
exports.SignalRConnectionMock = SignalRConnectionMock;
//# sourceMappingURL=signalr.connection.mock.js.map