import { SignalRConnectionBase } from './signalr.connection.base';
import { Observable } from 'rxjs/Observable';
import { ReplaySubject } from 'rxjs/ReplaySubject';
import { BroadcastEventListener } from '../eventing/broadcast.event.listener';
import { ConnectionStatus } from './connection.status';
export interface ListenerCollection {
    [name: string]: BroadcastEventListener<any>;
}
export declare class SignalRConnectionMock extends SignalRConnectionBase {
    private _status$;
    private _errors$;
    listeners: ListenerCollection;
    constructor();
    readonly errors: Observable<any>;
    readonly errors$: ReplaySubject<any>;
    readonly status: Observable<ConnectionStatus>;
    readonly status$: ReplaySubject<ConnectionStatus>;
    stop(): void;
    start(): Promise<any>;
    listen<T>(listener: BroadcastEventListener<T>): void;
    invoke(method: string, ...parameters: any[]): Promise<any>;
}
