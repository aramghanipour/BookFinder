"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var signalr_configuration_1 = require("./signalr.configuration");
var signalr_connection_1 = require("./connection/signalr.connection");
var core_1 = require("@angular/core");
var SignalR = (function () {
    function SignalR(configuration, zone) {
        this._configuration = configuration;
        this._zone = zone;
    }
    SignalR.prototype.connect = function () {
        var _this = this;
        var $promise = new Promise(function (resolve, reject) {
            var jQuery = _this.getJquery();
            var hubConnectionFn = _this.getHubConnection();
            var jConnection = hubConnectionFn(_this._configuration.url);
            jConnection.logging = _this._configuration.logging;
            jConnection.qs = _this._configuration.qs;
            var jProxy = jConnection.createHubProxy(_this._configuration.hubName);
            jProxy.on('noOp', function () { });
            console.log('Starting connection ...');
            var hubConnection = new signalr_connection_1.SignalRConnection(jConnection, jProxy, _this._zone);
            jConnection.start({ withCredentials: false })
                .done(function () {
                console.log('Connection established, ID: ' + jConnection.id);
                console.log('Connection established, Transport: ' + jConnection.transport.name);
                resolve(hubConnection);
            })
                .fail(function (error) {
                console.log('Could not connect');
                reject('Failed to connect. Error: ' + error.message);
            });
        });
        return $promise;
    };
    SignalR.prototype.getJquery = function () {
        jQuery = window.jQuery;
        if (jQuery == null)
            throw new Error('Signalr failed to connect. Script \'jquery.js\' is missing. Please make sure to include jquery script.');
        return jQuery;
    };
    SignalR.prototype.getHubConnection = function () {
        var hubConnectionFn = window.jQuery.hubConnection;
        if (hubConnectionFn == null)
            throw new Error('Signalr failed to connect. Script \'jquery.signalR.js\' is missing. Please make sure to include \'jquery.signalR.js\' script.');
        return hubConnectionFn;
    };
    return SignalR;
}());
SignalR = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [signalr_configuration_1.SignalRConfiguration, core_1.NgZone])
], SignalR);
exports.SignalR = SignalR;
//# sourceMappingURL=signalr.js.map